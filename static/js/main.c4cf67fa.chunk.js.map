{"version":3,"sources":["Components/images/warp_pipe.png","Components/images/mario_jump.png","Components/images/luigi_jump.png","Components/images/peach_jump.png","Components/images/yoshi_jump.png","Components/images/mushroom_kingdom_logo.jpeg","Components/pipe_elements.jsx","Components/nav_bar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Pipe","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","console","log","props","pic","react_default","a","createElement","className","id","concat","character","src","photo","alt","pipe","React","Component","NavBar","pipe_elements_Pipe","mario_jump","warp_pipe","luigi_jump","peach_jump","yoshi_jump","App","nav_bar_NavBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oICAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uKCE3BC,SAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAGI,OADAC,QAAQC,IAAIV,KAAKW,MAAMC,KAErBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,iBACVC,GAAE,GAAAC,OAAKlB,KAAKW,MAAMQ,UAAhB,oBAEFN,EAAAC,EAAAC,cAAA,OACEK,IAAKpB,KAAKW,MAAMU,MAChBC,IAAKtB,KAAKW,MAAMQ,UAChBH,UAAS,GAAAE,OAAKlB,KAAKW,MAAMQ,UAAhB,cAEXN,EAAAC,EAAAC,cAAA,OACEK,IAAKpB,KAAKW,MAAMY,KAChBD,IAAI,OACJN,UAAS,GAAAE,OAAKlB,KAAKW,MAAMQ,UAAhB,qBAhBnBvB,EAAA,CAA0B4B,IAAMC,+FCOnBC,SAAb,SAAA7B,GAAA,SAAA6B,IAAA,OAAA5B,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,GAAA5B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA4B,EAAA7B,GAAAC,OAAAQ,EAAA,EAAAR,CAAA4B,EAAA,EAAAnB,IAAA,SAAAC,MAAA,WAEI,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,MAEEH,EAAAC,EAAAC,cAAA,WAFF,WAIEF,EAAAC,EAAAC,cAAA,WAJF,YAQFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACY,EAAD,CAAMR,UAAU,QAAQE,MAAOO,IAAYL,KAAMM,MACjDhB,EAAAC,EAAAC,cAACY,EAAD,CAAMR,UAAU,QAAQE,MAAOS,IAAYP,KAAMM,MACjDhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,MAEEH,EAAAC,EAAAC,cAAA,WAFF,WAIEF,EAAAC,EAAAC,cAAA,WAJF,YAQFF,EAAAC,EAAAC,cAACY,EAAD,CAAMR,UAAU,QAAQE,MAAOU,IAAYR,KAAMM,MACjDhB,EAAAC,EAAAC,cAACY,EAAD,CAAMR,UAAU,QAAQE,MAAOW,IAAYT,KAAMM,YA1B3DH,EAAA,CAA4BF,IAAMC,YCOnBQ,mLATX,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAA,mCALUU,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c4cf67fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/warp_pipe.c8c14867.png\";","module.exports = __webpack_public_path__ + \"static/media/mario_jump.1b574a4f.png\";","module.exports = __webpack_public_path__ + \"static/media/luigi_jump.b9c4ce16.png\";","module.exports = __webpack_public_path__ + \"static/media/peach_jump.a22760c3.png\";","module.exports = __webpack_public_path__ + \"static/media/yoshi_jump.61625218.png\";","module.exports = __webpack_public_path__ + \"static/media/mushroom_kingdom_logo.f05d8125.jpeg\";","import React from \"react\";\n\nexport class Pipe extends React.Component {\n  render() {\n    console.log(this.props.pic);\n    return (\n      <div\n        className=\"pipe-container\"\n        id={`${this.props.character}-pipe-container`}\n      >\n        <img\n          src={this.props.photo}\n          alt={this.props.character}\n          className={`${this.props.character}-in-pipe`}\n        />\n        <img\n          src={this.props.pipe}\n          alt=\"pipe\"\n          className={`${this.props.character}-warp-pipe`}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Pipe } from \"./pipe_elements\";\nimport mario_jump from \"./images/mario_jump.png\";\nimport luigi_jump from \"./images/luigi_jump.png\";\nimport peach_jump from \"./images/peach_jump.png\";\nimport yoshi_jump from \"./images/yoshi_jump.png\";\nimport warp_pipe from \"./images/warp_pipe.png\";\nimport mushroom_kingdom_logo from \"./images/mushroom_kingdom_logo.jpeg\";\n\nexport class NavBar extends React.Component {\n  render() {\n    return (\n      <div className=\"nav-container\">\n        <div className=\"title-container-small\">\n          <h2 className=\"title-small\">\n            The\n            <br />\n            Mushroom\n            <br />\n            Kingdom\n          </h2>\n        </div>\n        <div className=\"nav-bar\">\n          <Pipe character=\"mario\" photo={mario_jump} pipe={warp_pipe} />\n          <Pipe character=\"luigi\" photo={luigi_jump} pipe={warp_pipe} />\n          <div className=\"title-container-large\">\n            <h2 className=\"title-large\">\n              The\n              <br />\n              Mushroom\n              <br />\n              Kingdom\n            </h2>\n          </div>\n          <Pipe character=\"peach\" photo={peach_jump} pipe={warp_pipe} />\n          <Pipe character=\"yoshi\" photo={yoshi_jump} pipe={warp_pipe} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { NavBar } from \"./Components/nav_bar\";\nimport { Pipe } from \"./Components/pipe_elements\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <h2> Hello world </h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}